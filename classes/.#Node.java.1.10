/*///////////////////////////////////////////////////////////////////////
**  This class creates Vertices and stores their state(healthy,infected        **
**suscptible) in a boolean array(state),in order to keep track of their          **
**state during the simulation.	 							       **
///////////////////////////////////////////////////////////////////////*/

import java.util.Vector;

public class Node {
    protected int incubation;
    final int bufferSize = 20;
    protected double lRate = 0;
    protected double gRate = 0;

    protected int[]  logBuffer;

    Node() {
    }


    /**
     * Constructor of the node. Each node is by default initialized as healthy and susceptible
     */
    Node(int index) {
        int name = index;
        incubation = 1;
        state = new boolean[3];

        state[0] = true;
        state[1] = false;
        state[2] = false;

        logBuffer = new int[bufferSize];

        //Initialize the logBuffer
        for (int i = 0; i < bufferSize; i++) {
            logBuffer[i] = 0;
        }
    }

    /**
     * Constructor of the node. Each node is by default initialized as susceptible and not immune (removed)
     */
    Node(String vertex) {
        String name = vertex;
        incubation = 1;
        state = new boolean[3];

        state[0] = true;
        state[1] = false;
        state[2] = false;

        logBuffer = new int[bufferSize];

        //Initialize the logBuffer
        for (int i = 0; i < bufferSize; i++) {
            logBuffer[i] = 0;
        }
    }


    public void setState(boolean susceptible, boolean infected, boolean immune) {
        state[0] = susceptible;
        state[1] = infected;
        state[2] = immune;
    }

    /*
     *Mutual exclusive setSusceptible function
     */
    public void setSusceptible() {
        state[0] = true;
        state[1] = false;
        state[2] = false;
    }

    /*
    *Mutual exclusive setInfected function
    */
    public void setInfected(int incub) {
        state[0] = false;
        state[1] = true;
        state[2] = false;
        incubation = incub;
    }


    /*
     *Mutual exclusive setInfected function
     *This method is deprecated. Please use setInfected(int incub) instead
     */
    public void setInfected() {
        state[0] = false;
        state[1] = true;
        state[2] = false;
    }

    /*
     *Mutual exclusive setImmune function
     */
    public void setImmune() {
        state[0] = false;
        state[1] = false;
        state[2] = true;
    }

    public void getState() {
        checkSusceptible();
        checkInfected();
        checkImmune();
    }


    protected boolean checkSusceptible() {
        return state[0];
    }

    protected boolean checkInfected() {
        return state[1];
    }

    protected boolean checkImmune() {
        return state[2];
    }

    public void setIncubation(int incub) {
        incubation = incub;
    }

    public void increaseIncubation() {
        incubation++;
    }

    public void decreaseIncubation() {
        incubation--;
    }

    protected int getIncubation() {
        return incubation;
    }

    protected int getVectorSize() {
        return this.bufferSize;
    }

    protected boolean[] state;

    protected void logAttack(int vp) {
        //increment by one the attack counter
        logBuffer[vp] = logBuffer[vp] + 1;

        //and initialize the circullar list
        if ((vp + 1) == this.bufferSize) {
            //Initialize again the system
            logBuffer[0] = 0;
        } else {
            //or clear the next slot in the matrix
            logBuffer[vp + 1] = 0;
        }
        //System.out.println("vp= " + vp + "\tInitializing: " + (vp + 1));
    }


    

    public double calculateLRate(int vp) {
            int tempSum = 0;
            double mean = 0;
            double pchange = 0;
            int actualSize = 0;

            for (int i = 0; i < this.bufferSize; i++) {
                //Leave the recent number of attacks out
                //System.out.println("Positiion: " + i + "\tLogs: " + logBuffer[i]);
                if (i != vp) { //&& (logBuffer[i] != 0)) {
                    tempSum += logBuffer[i];
                    actualSize++;
                }
            }

            //If no malicious activity is loged return 0
            if ((tempSum == 0) || (this.checkInfected())) {
                return(0);
            } else {
                mean = (double) (tempSum / (double) actualSize);
                //System.out.println("mean:   " + mean + "\ttempSum:    " + tempSum + "\tactual size: " + actualSize);

                //if (logBuffer[vp] != 0) {
                    pchange = (double) ((double) (logBuffer[vp] - mean)/ mean);
                    if ((int)(Math.random() * 500) == 5)
                    System.out.println("logBuffer[vp]:= " + logBuffer[vp] + "\t vp:= " + vp + "\t\ttemoSum= " +tempSum
                            + "\tmean= " + mean + "\tpchange= " + pchange + "\tactual size= " + actualSize);
                    //System.out.println("Rate of infection:= " + pchange);
                    return pchange;
                //} else return 0;
            }
        }
}